Open Docker Playground at: https://www.katacoda.com/courses/docker/deploying-first-container

(or a local VM with Linux and Docker host)

docker run -d -p 8080:80 --name mynginx nginx

#open browser  (locally in VM)
http://192.168.188.142:8080/

# in Katacoda (replace all elements except 8080 with the current environment definition):
https://2886795279-8080-kitek05.environments.katacoda.com/


# show the running container
docker ps

# show logs
docker logs mynginx --follow

# enter into the container
docker exec -it mynginx /bin/bash 

cd /usr/share/nginx/html
ls
mv index.html i.html
# reload in browser

# load in browser:
http://192.168.188.142:8080/i.html

mv i.html index.html

# reload in browser
http://192.168.188.142:8080

# check memory for container: 
cat /proc/meminfo

# check filesystem for container
df -Th


# run a second container
docker run -d -p 8090:80 --name mynginx2 nginx

# show the two containers running, based on the same image, exposed on different ports
docker ps

# copy index.html from container to docker host
docker cp mynginx2:/usr/share/nginx/html/index.html .

# manipulate local index.html

#copy back to container
docker cp ./index.html mynginx2:/usr/share/nginx/html

# reload in browser - to show the changed content

docker stop mynginx2
docker ps
docker ps -a 


docker inspect mynginx2

# see reference to host file system

sudo su -
cd /var/lib/docker/overlay2
cd <container data path>
# show recursive directory and file overview
ls -R

# show layers in image
docker history nginx

# restart container; show that changed file is still around
docker start mynginx2

#show in browser at port 8090

# edit index.html on Docker Host in /var/lib/docker/overlay2/<container id>/diff/usr/share/nginx/html
# refresh browser - no change visible
# stop container
docker stop mynginx2
# start container - 
docker start mynginx2
# reload in browser - change is visible: Docker Host change has become part of container

# start docker container with volume mapping - map local (on Docker Host) to container
docker run --name mynginx3 -v /tmp:/usr/share/nginx/html:ro -d -p 8095:80 nginx

docker cp mynginx:/usr/share/nginx/html/index.html /tmp

#load in browser

# manipulate /tmp/index.html on Docker host
#reload in browser - change is immediately visible - Container's folder  /usr/share/nginx/html is in fact the mapped/mounted folder from the Docker Host


# back to mynginx2 - this container consists of the clean nginx image with index.html changed on top of that
# assume the changes in the container on top of the default image are valuable enough to persist and to share...
# we can create a new image from the current state of the container:

docker commit mynginx2

docker images

docker tag <image id>  my-nginx-image:1.0
docker tag 867910d63cda  my-nginx-image:1.0


docker images
docker history my-nginx-image:1.0

docker stop mynginx2

# run a new nginx contain instance, this time based on the new custom image (based on the state of mynginx2)
docker run -d -p 8210:80 --name my-own-nginx my-nginx-image:1.0

# the image my-nginx-image:1.0 can be pushed and shared
sudo docker login

docker tag my-nginx-image:1.0 lucasjellema/my-nginx-image:1.0
docker push lucasjellema/my-nginx-image:1.0

# check Docker Hub
# https://hub.docker.com/?ref=login

# on Katacoda: https://www.katacoda.com/courses/docker/playground

docker run -p 8111:80 lucasjellema/my-nginx-image:1.0

# then open nginx in new browser window: https://2886795283-8111-kitek05.environments.katacoda.com/





